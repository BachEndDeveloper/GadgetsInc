@page "/chat"
@using GadgetsInc.Web.Services
@inject ChatApiClient ChatApi
@inject IJSRuntime JS
@rendermode InteractiveServer

<PageTitle>GadgetsInc - AI Chat Assistant</PageTitle>

<div class="chat-container">
    <div class="chat-header">
        <h1 class="display-6 mb-0">
            <i class="bi bi-robot me-2"></i>
            GadgetsInc AI Assistant
        </h1>
        <p class="text-muted mb-0">Get help with products, orders, and support</p>
    </div>

    <div class="chat-messages" id="chatMessages">
        @foreach (var message in chatMessages)
        {
            <div class="message @(message.IsUser ? "user-message" : "bot-message")">
                <div class="message-avatar">
                    @if (message.IsUser)
                    {
                        <i class="bi bi-person-circle"></i>
                    }
                    else
                    {
                        <i class="bi bi-robot"></i>
                    }
                </div>
                <div class="message-content">
                    <div class="message-text">
                        @message.Content
                    </div>
                    <div class="message-time">
                        @message.Timestamp.ToString("HH:mm")
                    </div>
                </div>
            </div>
        }
        
        @if (isLoading)
        {
            <div class="message bot-message">
                <div class="message-avatar">
                    <i class="bi bi-robot"></i>
                </div>
                <div class="message-content">
                    <div class="message-text">
                        <div class="typing-indicator">
                            <span></span>
                            <span></span>
                            <span></span>
                        </div>
                    </div>
                </div>
            </div>
        }
    </div>

    <div class="chat-input-container">
        <div class="input-group">
            <input @bind="currentMessage" 
                   @onkeypress="HandleKeyPress"
                   type="text" 
                   class="form-control chat-input" 
                   placeholder="Ask about products, orders, or support..."
                   disabled="@isLoading" />
            <button @onclick="SendMessage" 
                    class="btn btn-primary" 
                    disabled="@(isLoading || string.IsNullOrWhiteSpace(currentMessage))">
                @if (isLoading)
                {
                    <span class="spinner-border spinner-border-sm me-2" role="status"></span>
                }
                <i class="bi bi-send"></i>
            </button>
        </div>
        
        <div class="chat-suggestions mt-2">
            <small class="text-muted">Try asking:</small>
            <div class="suggestion-pills mt-1">
                <button @onclick="@(() => SetSuggestion("Tell me about your smartphones"))" 
                        class="btn btn-outline-secondary btn-sm me-1 mb-1">
                    Smartphones
                </button>
                <button @onclick="@(() => SetSuggestion("How can I track my order?"))" 
                        class="btn btn-outline-secondary btn-sm me-1 mb-1">
                    Track Order
                </button>
                <button @onclick="@(() => SetSuggestion("What is your return policy?"))" 
                        class="btn btn-outline-secondary btn-sm me-1 mb-1">
                    Returns
                </button>
                <button @onclick="@(() => SetSuggestion("Calculate shipping cost for 2kg to Europe"))" 
                        class="btn btn-outline-secondary btn-sm me-1 mb-1">
                    Shipping
                </button>
            </div>
        </div>
    </div>
</div>

<style>
    .chat-container {
        max-width: 800px;
        height: 80vh;
        margin: 0 auto;
        display: flex;
        flex-direction: column;
        border: 1px solid #e0e0e0;
        border-radius: 12px;
        overflow: hidden;
        box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
    }

    .chat-header {
        background: linear-gradient(135deg, #007bff, #0056b3);
        color: white;
        padding: 1rem;
        text-align: center;
    }

    .chat-messages {
        flex: 1;
        overflow-y: auto;
        padding: 1rem;
        background-color: #f8f9fa;
    }

    .message {
        display: flex;
        margin-bottom: 1rem;
        align-items: flex-start;
    }

    .user-message {
        flex-direction: row-reverse;
    }

    .message-avatar {
        width: 40px;
        height: 40px;
        border-radius: 50%;
        display: flex;
        align-items: center;
        justify-content: center;
        font-size: 1.25rem;
        margin: 0 0.5rem;
    }

    .user-message .message-avatar {
        background-color: #007bff;
        color: white;
    }

    .bot-message .message-avatar {
        background-color: #6c757d;
        color: white;
    }

    .message-content {
        max-width: 70%;
        min-width: 100px;
    }

    .message-text {
        padding: 0.75rem 1rem;
        border-radius: 18px;
        word-wrap: break-word;
        white-space: pre-wrap;
    }

    .user-message .message-text {
        background-color: #007bff;
        color: white;
        border-bottom-right-radius: 6px;
    }

    .bot-message .message-text {
        background-color: #e9ecef;
        color: #333;
        border-bottom-left-radius: 6px;
    }

    .message-time {
        font-size: 0.75rem;
        color: #6c757d;
        margin-top: 0.25rem;
        text-align: right;
    }

    .user-message .message-time {
        text-align: left;
    }

    .chat-input-container {
        padding: 1rem;
        background-color: white;
        border-top: 1px solid #e0e0e0;
    }

    .chat-input {
        border-radius: 25px;
        border: 1px solid #ddd;
        padding: 0.75rem 1rem;
    }

    .chat-input:focus {
        box-shadow: 0 0 0 0.2rem rgba(0, 123, 255, 0.25);
        border-color: #007bff;
    }

    .btn:last-child {
        border-radius: 50%;
        width: 45px;
        height: 45px;
        display: flex;
        align-items: center;
        justify-content: center;
    }

    .suggestion-pills {
        display: flex;
        flex-wrap: wrap;
        gap: 0.25rem;
    }

    .typing-indicator {
        display: flex;
        align-items: center;
        gap: 4px;
    }

    .typing-indicator span {
        height: 8px;
        width: 8px;
        background-color: #6c757d;
        border-radius: 50%;
        animation: typing 1.4s infinite ease-in-out;
    }

    .typing-indicator span:nth-child(1) { animation-delay: -0.32s; }
    .typing-indicator span:nth-child(2) { animation-delay: -0.16s; }

    @@keyframes typing {
        0%, 80%, 100% { transform: scale(0.8); opacity: 0.5; }
        40% { transform: scale(1); opacity: 1; }
    }

    @@media (max-width: 768px) {
        .chat-container {
            height: 90vh;
            margin: 0;
            border-radius: 0;
        }
        
        .message-content {
            max-width: 85%;
        }
    }
</style>

@code {
    private string currentMessage = "";
    private bool isLoading = false;
    private List<ChatMessage> chatMessages = new();
    
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            // Add welcome message
            chatMessages.Add(new ChatMessage(
                "Welcome to GadgetsInc! I'm your AI assistant and I can help you with:\n\n" +
                "• Product information and recommendations\n" +
                "• Order tracking and shipping\n" +
                "• Customer support and warranty\n" +
                "• Technical questions\n\n" +
                "How can I assist you today?",
                false,
                DateTime.Now
            ));
            StateHasChanged();
            await ScrollToBottom();
        }
    }

    private async Task SendMessage()
    {
        if (string.IsNullOrWhiteSpace(currentMessage) || isLoading)
            return;

        var userMessage = currentMessage.Trim();
        currentMessage = "";
        
        // Add user message
        chatMessages.Add(new ChatMessage(userMessage, true, DateTime.Now));
        isLoading = true;
        StateHasChanged();
        await ScrollToBottom();

        try
        {
            // Send message to API
            var response = await ChatApi.SendMessageAsync(userMessage);
            
            // Add bot response
            chatMessages.Add(new ChatMessage(response, false, DateTime.Now));
        }
        catch (Exception ex)
        {
            chatMessages.Add(new ChatMessage(
                $"Sorry, I encountered an error: {ex.Message}\n\nPlease try again or contact support at 1-800-GADGETS.",
                false,
                DateTime.Now
            ));
        }
        finally
        {
            isLoading = false;
            StateHasChanged();
            await ScrollToBottom();
        }
    }

    private async Task HandleKeyPress(KeyboardEventArgs e)
    {
        if (e.Key == "Enter" && !e.ShiftKey)
        {
            await SendMessage();
        }
    }

    private void SetSuggestion(string suggestion)
    {
        currentMessage = suggestion;
        StateHasChanged();
    }

    private async Task ScrollToBottom()
    {
        await Task.Delay(50); // Small delay to ensure DOM is updated
        await JS.InvokeVoidAsync("scrollToBottom", "chatMessages");
    }

    private record ChatMessage(string Content, bool IsUser, DateTime Timestamp);
}